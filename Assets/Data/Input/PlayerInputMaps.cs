//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Data/Input/PlayerInputMaps.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputMaps : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputMaps()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMaps"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""d415c405-59a5-4286-b306-b5ec1a911695"",
            ""actions"": [
                {
                    ""name"": ""MouseScrollDelta"",
                    ""type"": ""Value"",
                    ""id"": ""74a4f15c-5bfe-4b0e-a4cb-82005b8ff06e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Button"",
                    ""id"": ""a30037c3-0f53-4ade-be72-08f0053939c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""e7939596-6e5d-489f-88b6-65c454ab1b7c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9314e22b-a8c7-4193-89d4-b110dd8197af"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""MouseScrollDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d1bc566-9f11-4d1f-b3b8-d5c2f1c58249"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10af7ec1-dfb9-4e79-8fc7-eaf60e7ec444"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Input"",
            ""id"": ""b93b49ca-aa7e-434f-bd97-1242f59d1612"",
            ""actions"": [
                {
                    ""name"": ""ChoosingClick"",
                    ""type"": ""Button"",
                    ""id"": ""23d39185-290a-42ba-aeee-1507c9512ffd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TargetingClick"",
                    ""type"": ""Button"",
                    ""id"": ""b7b47bc1-97b7-42c2-9663-99636b14783f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f4f92fd-c017-4260-8d1a-abac4d299996"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChoosingClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6bb1036-8d5b-4e5d-929c-20669ab0058f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TargetingClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MouseScrollDelta = m_Camera.FindAction("MouseScrollDelta", throwIfNotFound: true);
        m_Camera_MouseScroll = m_Camera.FindAction("MouseScroll", throwIfNotFound: true);
        m_Camera_MouseDelta = m_Camera.FindAction("MouseDelta", throwIfNotFound: true);
        // Input
        m_Input = asset.FindActionMap("Input", throwIfNotFound: true);
        m_Input_ChoosingClick = m_Input.FindAction("ChoosingClick", throwIfNotFound: true);
        m_Input_TargetingClick = m_Input.FindAction("TargetingClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_MouseScrollDelta;
    private readonly InputAction m_Camera_MouseScroll;
    private readonly InputAction m_Camera_MouseDelta;
    public struct CameraActions
    {
        private @PlayerInputMaps m_Wrapper;
        public CameraActions(@PlayerInputMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseScrollDelta => m_Wrapper.m_Camera_MouseScrollDelta;
        public InputAction @MouseScroll => m_Wrapper.m_Camera_MouseScroll;
        public InputAction @MouseDelta => m_Wrapper.m_Camera_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @MouseScrollDelta.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScrollDelta;
                @MouseScrollDelta.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScrollDelta;
                @MouseScrollDelta.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScrollDelta;
                @MouseScroll.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseScroll;
                @MouseDelta.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMouseDelta;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseScrollDelta.started += instance.OnMouseScrollDelta;
                @MouseScrollDelta.performed += instance.OnMouseScrollDelta;
                @MouseScrollDelta.canceled += instance.OnMouseScrollDelta;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Input
    private readonly InputActionMap m_Input;
    private IInputActions m_InputActionsCallbackInterface;
    private readonly InputAction m_Input_ChoosingClick;
    private readonly InputAction m_Input_TargetingClick;
    public struct InputActions
    {
        private @PlayerInputMaps m_Wrapper;
        public InputActions(@PlayerInputMaps wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChoosingClick => m_Wrapper.m_Input_ChoosingClick;
        public InputAction @TargetingClick => m_Wrapper.m_Input_TargetingClick;
        public InputActionMap Get() { return m_Wrapper.m_Input; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputActions set) { return set.Get(); }
        public void SetCallbacks(IInputActions instance)
        {
            if (m_Wrapper.m_InputActionsCallbackInterface != null)
            {
                @ChoosingClick.started -= m_Wrapper.m_InputActionsCallbackInterface.OnChoosingClick;
                @ChoosingClick.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnChoosingClick;
                @ChoosingClick.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnChoosingClick;
                @TargetingClick.started -= m_Wrapper.m_InputActionsCallbackInterface.OnTargetingClick;
                @TargetingClick.performed -= m_Wrapper.m_InputActionsCallbackInterface.OnTargetingClick;
                @TargetingClick.canceled -= m_Wrapper.m_InputActionsCallbackInterface.OnTargetingClick;
            }
            m_Wrapper.m_InputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChoosingClick.started += instance.OnChoosingClick;
                @ChoosingClick.performed += instance.OnChoosingClick;
                @ChoosingClick.canceled += instance.OnChoosingClick;
                @TargetingClick.started += instance.OnTargetingClick;
                @TargetingClick.performed += instance.OnTargetingClick;
                @TargetingClick.canceled += instance.OnTargetingClick;
            }
        }
    }
    public InputActions @Input => new InputActions(this);
    public interface ICameraActions
    {
        void OnMouseScrollDelta(InputAction.CallbackContext context);
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface IInputActions
    {
        void OnChoosingClick(InputAction.CallbackContext context);
        void OnTargetingClick(InputAction.CallbackContext context);
    }
}
